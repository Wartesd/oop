from typing import Protocol, List
import re
import sys
import socket


class LogFilterProtocol(Protocol):
    def match(self, text: str) -> bool:
        pass


class SimpleLogFilter(LogFilterProtocol):
    def __init__(self, pattern: str):
        self.pattern = pattern

    def match(self, text: str) -> bool:
        try:
            return self.pattern in text
        except Exception as e:
            print(f"Error in SimpleLogFilter matching: {e}")
            return False


class ReLogFilter(LogFilterProtocol):
    def __init__(self, pattern: str):
        try:
            self.regex = re.compile(pattern)
        except re.error as e:
            print(f"Invalid regex pattern '{pattern}': {e}")
            self.regex = re.compile(r'')  # Пустой паттерн, который ничего не матчит
        except Exception as e:
            print(f"Unexpected error when compiling regex: {e}")
            self.regex = re.compile(r'')

    def match(self, text: str) -> bool:
        try:
            return bool(self.regex.search(text))
        except Exception as e:
            print(f"Error in ReLogFilter matching: {e}")
            return False


class LogHandlerProtocol(Protocol):
    def handle(self, text: str):
        pass


class FileHandler(LogHandlerProtocol):
    def __init__(self, filename: str):
        self.filename = filename

    def handle(self, text: str):
        try:
            with open(self.filename, "a") as f:
                f.write(text + "\n")
        except PermissionError as e:
            print(f"Permission denied when writing to file {self.filename}: {e}")
        except IOError as e:
            print(f"IOError when writing to file {self.filename}: {e}")
        except Exception as e:
            print(f"Unexpected error when writing to file {self.filename}: {e}")


class SocketHandler(LogHandlerProtocol):
    def __init__(self, host: str, port: int):
        self.host = host
        self.port = port

    def handle(self, text: str):
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(2)
                s.connect((self.host, self.port))
                s.sendall(text.encode())
        except socket.timeout:
            print(f"Connection to {self.host}:{self.port} timed out")
        except socket.gaierror:
            print(f"Address-related error when connecting to {self.host}:{self.port}")
        except socket.error as e:
            print(f"Socket error when connecting to {self.host}:{self.port}: {e}")
        except Exception as e:
            print(f"Unexpected error when sending data to socket: {e}")


class ConsoleHandler(LogHandlerProtocol):
    def handle(self, text: str):
        try:
            print(text)
        except Exception as e:
            print(f"Error writing to console: {e}")


class SyslogHandler(LogHandlerProtocol):
    def handle(self, text: str):
        try:
            sys.stderr.write(text + "\n")
        except Exception as e:
            print(f"Error writing to syslog: {e}")


class Logger:
    def __init__(self, _filters: List[LogFilterProtocol], _handlers: List[LogHandlerProtocol]):
        self.__filters = _filters
        self.__handlers = _handlers

    def log(self, text: str):
        try:
            if all(f.match(text) for f in self.__filters):
                for handler in self.__handlers:
                    handler.handle(text)
        except Exception as e:
            print(f"Error during logging: {e}")


if __name__ == "__main__":
    filters = [SimpleLogFilter("ERROR"), ReLogFilter(r"\d+")]
    handlers = [ConsoleHandler(), FileHandler("logs.txt"), SocketHandler("localhost", 9999)]

    logger = Logger(filters, handlers)
    logger.log("ERROR: 1412412")
