print(f"Критическая ошибка при уведомлении об изменении: {e}")

    @property
    def name(self) -> str:
        return self._name

    @name.setter
    def name(self, value: str) -> None:
        if value != self._name:
            try:
                if self._notify_property_changing("name", self._name, value):
                    old_value = self._name
                    self._name = value
                    try:
                        self._notify_property_changed("name")
                    except Exception as e:
                        # Откатываем изменение если уведомление не удалось
                        self._name = old_value
                        print(f"Ошибка уведомления, изменение отменено: {e}")
            except Exception as e:
                print(f"Фатальная ошибка при изменении имени: {e}")

    @property
    def age(self) -> int:
        return self._age

    @age.setter
    def age(self, value: Any) -> None:
        if value != self._age:
            try:
                if not isinstance(value, int):
                    raise ValueError("Возраст должен быть целым числом")
                
                if self._notify_property_changing("age", self._age, value):
                    old_value = self._age
                    self._age = value
                    try:
                        self._notify_property_changed("age")
                    except Exception as e:
                        # Откатываем изменение если уведомление не удалось
                        self._age = old_value
                        print(f"Ошибка уведомления, изменение отменено: {e}")
            except ValueError as e:
                print(f"Ошибка значения возраста: {e}")
            except Exception as e:
                print(f"Фатальная ошибка при изменении возраста: {e}")


class PrintChangeListener:
    def on_property_changed(self, obj: Any, property_name: str) -> None:
        try:
            value = getattr(obj, property_name)
            print(f"[Изменено] {property_name} -> {value}")
        except AttributeError:
            print(f"Ошибка: свойство {property_name} не существует")
        except Exception as e:
            print(f"Ошибка вывода изменения: {e}")


class AgeValidator:
    def on_property_changing(self, obj: Any, property_name: str, old_value: Any, new_value: Any) -> bool:
        try:
            if property_name == "age":
                if not isinstance(new_value, int):
                    print("[Ошибка] Возраст должен быть целым числом")
                    return False
                if new_value < 0 or new_value > 150:
                    print(f"[Невалидно] Возраст {new_value} вне допустимого диапазона (0-150)")
                    return False
            return True
        except Exception as e:
            print(f"Критическая ошибка валидации возраста: {e}")
            return False


class NameValidator:
    def on_property_changing(self, obj: Any, property_name: str, old_value: Any, new_value: Any) -> bool:
        try:
            if property_name == "name":
                if not isinstance(new_value, str):
                    print("[Ошибка] Имя должно быть строкой")
                    return False
                if not new_value.strip():
                    print("[Ошибка] Имя не может быть пустым")
                    return False
            return True
        except Exception as e:
            print(f"Критическая ошибка валидации имени: {e}")
            return False


class RegexValidator:
    def __init__(self, property_name: str, pattern: str):
        self.property_name = property_name
        self.regex = None
        try:
            self.regex = re.compile(pattern)
        except re.error as e:
            print(f"Ошибка в регулярном выражении '{pattern}': {e}")
        except Exception as e:
            print(f"Неожиданная ошибка при компиляции шаблона: {e}")

    def on_property_changing(self, obj: Any, property_name: str, old_value: Any, new_value: Any) -> bool:
        if property_name != self.property_name or self.regex is None:
return True
            
        try:
            str_value = str(new_value)
            if not self.regex.fullmatch(str_value):
                print(f"[Ошибка] '{str_value}' не соответствует шаблону {self.regex.pattern}")
                return False
            return True
        except Exception as e:
            print(f"Ошибка проверки регулярного выражения: {e}")
            return False


if __name__ == "__main__":  # Исправлено: name -> __name__
    try:
        person = ObservableValidatedClass("Иван", 30)

        # Добавляем слушатели с проверкой
        try:
            person.add_property_changed_listener(PrintChangeListener())
        except Exception as e:
            print(f"Не удалось добавить слушатель изменений: {e}")

        validators = [
            AgeValidator(),
            NameValidator(),
            RegexValidator("name", r"^[А-Яа-яA-Za-z]+$")
        ]
        
        for validator in validators:
            try:
                person.add_property_changing_listener(validator)
            except Exception as e:
                print(f"Не удалось добавить валидатор {validator.__class__.__name__}: {e}")

        # Тестовые изменения
        test_cases = [
            ("name", "Алексей"),
            ("name", ""),
            ("name", "Иван123"),
            ("age", 200),
            ("age", 35),
            ("age", "тридцать пять")
        ]

        for prop, value in test_cases:
            try:
                if prop == "name":
                    person.name = value
                elif prop == "age":
                    person.age = value
            except Exception as e:
                print(f"Ошибка при установке {prop} = {value}: {e}")

    except Exception as e:
        print(f"Критическая ошибка в работе программы: {e}")
